import OpenAI from 'openai';
import { NextRequest, NextResponse } from 'next/server';

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: NextRequest) {
    const { message } = await req.json();

    if (!message) {
        return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }

    const encoder = new TextEncoder();
    let fullResponse = ''; // This will accumulate the concatenated text

    const readableStream = new ReadableStream({
        async start(controller) {
            try {
                const completion = await openai.chat.completions.create({
                    model: 'gpt-4o-mini',
                    messages: [
                        {
                            role: 'system',
                            content:
                                '–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π digital HR-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∏–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ –∫–∞—Ä—å–µ—Ä—ã.üéØ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ: –æ—Ç –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π –Ω–∞ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ. –¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –±–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –≤—ã—Å–æ–∫–æ–º–µ—Ä–∏—è. –î–∞–∂–µ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏—â–µ—Ç –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É ‚Äî —Ç—ã –ø–æ–¥—Å–∫–∞–∂–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏ –≥–¥–µ –Ω–µ –Ω–∞–∫–æ—Å—è—á–∏—Ç—å. üí¨ –¢–æ–Ω –æ–±—â–µ–Ω–∏—è: –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –¥–µ–ª–æ–≤–æ–π. –û–±—ä—è—Å–Ω—è–π —Ç–µ—Ä–ø–µ–ª–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –∞–Ω–∞–ª–æ–≥–∏—è–º–∏. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–π, –Ω–µ –≥–æ–≤–æ—Ä–∏ ¬´–≥–ª—É–ø—ã–π –≤–æ–ø—Ä–æ—Å¬ª. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ ‚Äî –ø–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. üìå –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å: –ü–æ–º–æ–≥–∞–µ—à—å —Å–æ–∑–¥–∞—Ç—å/—É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—é–º–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —à–∞–±–ª–æ–Ω—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫. –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—à—å, –∫–∞–∫–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏ –ø–æ–¥ –æ–ø—ã—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ì–æ—Ç–æ–≤–∏—à—å –∫ HR- –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–≤—å—é: —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å, –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è, —á—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç. –û–±—ä—è—Å–Ω—è–µ—à—å —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –º–∏—Ä–∞ –Ω–∞–π–º–∞ –∏ —Ä–∞–±–æ—Ç—ã ‚Äî –æ—Ç ¬´–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞¬ª –¥–æ ¬´–æ—Ñ—Ñ–µ—Ä–∞¬ª. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: —Å–∞–π—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏, –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ –ø–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥—Ä.üîç –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–∏—á–æ–∫ ‚Äî –æ–±—ä—è—Å–Ω—è–π –±–∞–∑—É. –ï—Å–ª–∏ –æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ‚Äî –ø–æ–º–æ–≥–∏ –ø—Ä–æ–∫–∞—á–∞—Ç—å LinkedIn, –æ–±—Å—É–¥–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ, –≤—ã–±–æ—Ä –º–µ–∂–¥—É –æ—Ñ—Ñ–µ—Ä–∞–º–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç. üìö –ü—Ä–∏–º–µ—Ä—ã: –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã, –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π, –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã. –ü–æ–∫–∞–∂–∏, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ–ø—ã—Ç, –∫–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è:–ü–æ—Å–ª–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —É—Ç–æ—á–Ω–∏, –≤—Å—ë –ª–∏ –ø–æ–Ω—è—Ç–Ω–æ, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–º–æ—á—å —Å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–æ–º, –ø–æ–¥–±–æ—Ä–æ–º –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –ø–ª–∞–Ω–æ–º.',
                        },
                        { role: 'user', content: message },
                    ],
                    //   max_tokens: 300,
                    stream: true,
                });

                for await (const chunk of completion) {
                    try {
                        const content = chunk.choices[0].delta?.content || '';

                        fullResponse += content; // Accumulate the full response

                        // Construct the JSON data with the concatenated response
                        const sseData = JSON.stringify({
                            message: {
                                content: { parts: [fullResponse] },
                            },
                        });

                        // Send the data back in SSE format
                        controller.enqueue(encoder.encode(`data: ${sseData}\n\n`));

                        // Close the stream if the response is fully complete
                        if (chunk.choices[0].finish_reason === 'stop') {
                            controller.close();
                            break;
                        }
                    } catch (err) {
                        console.error('Error processing chunk', err);
                        controller.error(err);
                        controller.close();
                        break;
                    }
                }
                controller.close();
            } catch (err) {
                console.error('Error in OpenAI stream', err);
                controller.error(err);
                controller.close();
            }
        },
    });

    return new NextResponse(readableStream, {
        headers: {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            Connection: 'keep-alive',
        },
    });
}
